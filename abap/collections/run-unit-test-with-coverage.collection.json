{
	"variables": [],
	"info": {
		"name": "run-unit-test-with-coverage",
		"_postman_id": "c5cb6ef9-646f-36fa-d7d6-aee753ea4183",
		"description": "",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "UT",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"var oJsonObject, oResult, oCoverage,\r",
							"    sUri = \"\";\r",
							"\r",
							"if (responseCode.code !== 200) {\r",
							"    tests[\"could not execute the tests due to a statusCode \" + responseCode.code + \" error\"] = false;\r",
							"}\r",
							"\r",
							"var oJsonObject  = xml2Json(responseBody),\r",
							"\r",
							"    oResult = oJsonObject[\"aunit:runResult\"],\r",
							"    oCoverage = oResult[\"external\"][\"coverage\"],\r",
							"    oPrograms = oResult[\"program\"],\r",
							"    \r",
							"    sClassName  = \"\",\r",
							"    sTestMethod = \"\";\r",
							"\r",
							"for (var sProgramId in oPrograms) {\r",
							"    var i = parseInt(sProgramId),\r",
							"        oProgram = oPrograms[i];\r",
							"    \r",
							"    oTestClasses  = Object.values(oProgram[\"testClasses\"][\"testClass\"]);\r",
							"    oTestsMethods = Object.values(oTestClasses[1]);\r",
							"    \r",
							"    for (var sTestMethodId in oTestsMethods) {\r",
							"        var j = parseInt(sTestMethodId),\r",
							"            oTestMethod = oTestsMethods[j];\r",
							"        \r",
							"        sClassName = getNodeValue(oProgram, \"adtcore:name\");\r",
							"        try {\r",
							"            sTestMethod = getNodeValue(oTestMethod, \"adtcore:name\");\r",
							"            tests[sClassName + \" :: \" + sTestMethod] = true;                \r",
							"\r",
							"        } catch (oErr) {\r",
							"            for (var oMethodId in oTestMethod) {\r",
							"                var k = parseInt(oMethodId);\r",
							"                oMethod = oTestMethod[k];\r",
							"\r",
							"                sTestMethod = getNodeValue(oMethod, \"adtcore:name\");\r",
							"                tests[sClassName + \" :: \" + sTestMethod] = true;\r",
							"            }\r",
							"        }\r",
							"    }\r",
							"}\r",
							"\r",
							"fillEnvironmentVariables(\r",
							"    getNodeValue(oCoverage, \"adtcore:uri\")\r",
							")\r",
							"\r",
							"function isContentValid(oJsonObject) {\r",
							"    if (oJsonObject) {\r",
							"        return true;\r",
							"    } else {\r",
							"        return false;\r",
							"    }\r",
							"}\r",
							"\r",
							"function getNode(oParent, name) {\r",
							"    oParent[\"\"/ + name + \"\"];\r",
							"}\r",
							"\r",
							"function getNodeValue(oNode, name) {\r",
							"    if (oNode.$[name]) {\r",
							"        return oNode.$[name];\r",
							"    } else {\r",
							"        return \"\";\r",
							"    }\r",
							"}\r",
							"\r",
							"function fillEnvironmentVariables(sUri) {\r",
							"    postman.setGlobalVariable(\"measurementURI\", sUri);\r",
							"}"
						]
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"//http.setCookie(\"SAP_SESSIONID_NPL_001\", postman.getGlobalVariable(\"SAP_SESSIONID_NPL_001\"))",
							""
						]
					}
				}
			],
			"request": {
				"url": "{{protocol}}{{host}}/sap/bc/adt/abapunit/testruns",
				"method": "POST",
				"header": [
					{
						"key": "x-csrf-token",
						"value": "{{x-csrf-token}}",
						"description": ""
					},
					{
						"key": "Content-Type",
						"value": "application/xml",
						"description": ""
					},
					{
						"key": "Cookie",
						"value": "sap-usercontext={{sap-usercontext}}; SAP_SESSIONID_NPL_001={{SAP_SESSIONID_NPL_001}}; SAP_SESSIONID_NPL_001={{SAP_SESSIONID_NPL_001}}",
						"description": ""
					}
				],
				"body": {
					"mode": "raw",
					"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<aunit:runConfiguration xmlns:aunit=\"http://www.sap.com/adt/aunit\">\r\n\t<external>\r\n\t\t<coverage active=\"true\"/>\r\n\t</external>\r\n\t<options>\r\n\t\t<uriType value=\"semantic\"/>\r\n\t\t<testDeterminationStrategy appendAssignedTestsPreview=\"true\" assignedTests=\"false\" sameProgram=\"true\"/>\r\n\t\t<testRiskLevels critical=\"true\" dangerous=\"true\" harmless=\"true\"/>\r\n\t\t<testDurations long=\"true\" medium=\"true\" short=\"true\"/>\r\n\t\t<withNavigationUri enabled=\"false\"/>\r\n\t</options>\r\n\t<adtcore:objectSets xmlns:adtcore=\"http://www.sap.com/adt/core\">\r\n\t\t<objectSet kind=\"inclusive\">\r\n\t\t\t<adtcore:objectReferences>\r\n\t\t\t\t<adtcore:objectReference adtcore:uri=\"/sap/bc/adt/packages/z-lac\"/>\r\n\t\t\t</adtcore:objectReferences>\r\n\t\t</objectSet>\r\n\t</adtcore:objectSets>\r\n</aunit:runConfiguration>"
				},
				"description": ""
			},
			"response": []
		}
	]
}